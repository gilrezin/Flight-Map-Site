<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FlightMap Homepage</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-LN+7fdVzj6u52u30Kp6M/trliBMCMKTyK833zpbD+pXdCLuTusPj697FH4R/5mcr" crossorigin="anonymous">
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <link href="flightmap.css" rel="stylesheet">
    <style>
        #map { height: 93vh; width: 100%; }
        .search-container { position: relative; z-index: 1000; background: rgba(255,255,255,0.95); }
        
        
        
        /* Legend styles */
        .map-legend {
            position: absolute;
            bottom: 20px;
            right: 20px;
            background: rgba(255,255,255,0.9);
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            z-index: 1000;
            font-size: 0.9em;
        }
        
        .legend-item {
            display: flex;
            align-items: center;
            margin: 5px 0;
        }
        
        .legend-color {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 8px;
            border: 1px solid #fff;
        }
        
        .loading-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255,255,255,0.8);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 2000;
            font-size: 1.2em;
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg bg-body-tertiary search-container">
        <div class="container-fluid">
            <a class="navbar-brand" href="/">FlightMap</a>
            
            <form class="d-flex w-100" action="/search" method="GET">
                <div class="d-flex me-2">
                    <label class="nav-item me-2 mt-2">From:</label>
                    <input name="departure" class="form-control me-2" type="text" placeholder="SEA" required style="width: 80px;">
                </div>

                <div class="d-flex me-2">
                    <label class="nav-item me-2 mt-2">To:</label>
                    <input name="arrival" class="form-control me-2" type="text" placeholder="LAX" style="width: 80px;">
                </div>

                <div class="d-flex me-2">
                    <label class="nav-item me-2 mt-2">Date:</label>
                    <input name="date" class="form-control me-2" type="date">
                </div>

                <div class="d-flex me-2">
                    <label class="nav-item me-2 mt-2">Airline:</label>
                    <select name="airline" class="form-select me-2" style="width: 150px;">
                        <option value="">All Airlines</option>
                        <% airlines.forEach(airline => { %>
                            <option value="<%= airline.name %>"><%= airline.name %></option>
                        <% }) %>
                    </select>
                </div>

                <div class="flex-column align-items-start me-2">
                    <input type="range" min="0" max="24" step="1" aria-label="Starting hour" value="0" name="fromHour">
                    <p class="small mb-0">0:00 - - - - - - ☀️ - - - - - - 23:59</p>
                    <div class="flex-column align-items-start me-2">
                        <input type="range" min="0" max="24" step="1" aria-label="Ending hour" value="24" name="toHour">
                    </div>
                </div>

                <button class="btn btn-primary" type="submit">Search Flights</button>
                <button class="btn btn-secondary ms-2" type="button" onclick="resetMapMarkers()">Reset Map</button>
            </form>

            <button class="btn btn-primary" type="submit">Login</button>
        </div>
    </nav>

    <div style="position: relative;">
        <div id="map"></div>
        
        <!-- Map Legend -->
        <div class="map-legend">
            <h6 style="margin: 0 0 10px 0; font-weight: bold;">Airport Legend</h6>
            <div class="legend-item">
                <div class="legend-color" style="background: #007bff;"></div>
                <span>All Airports</span>
            </div>
            <div class="legend-item">
                <div class="legend-color" style="background: #28a745;"></div>
                <span>Selected Departure</span>
            </div>
            <div class="legend-item">
                <div class="legend-color" style="background: #fd7e14;"></div>
                <span>Available Destinations</span>
            </div>
            <div class="legend-item">
                <div class="legend-color" style="background: #6c757d; opacity: 0.5;"></div>
                <span>Other Airports</span>
            </div>
        </div>
        
        <!-- Loading overlay -->
        <div id="loading-overlay" class="loading-overlay" style="display: none;">
            <div>
                <div>Loading airports...</div>
                <div style="font-size: 0.8em; color: #666; margin-top: 5px;">This may take a moment</div>
            </div>
        </div>
    </div>

    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        // Initialize the map
        const map = L.map('map').setView([39.8283, -98.5795], 4); // Center on USA
		const focusAirports = ["GEG", "SEA", "LAX", "JFK", "SFO", "DCA", "DFW", "ORD"]

        // Add tile layer
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '© OpenStreetMap contributors'
        }).addTo(map);

        // Store all airport markers for easy access
        let allAirportMarkers = [];
        let isLoading = false;

        // Load airports and display them on the map
        async function loadAirports() {
            if (isLoading) return;
            isLoading = true;
            
            // Show loading overlay
            document.getElementById('loading-overlay').style.display = 'flex';
            
            try {
                console.log('Loading all airports...');
                const response = await fetch('/api/airports?limit=5000'); // Load many more airports
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const airports = await response.json();
                console.log(`Received ${airports.length} airports from API`);
                
                let validAirports = 0;
                let invalidAirports = 0;
                
                airports.forEach((airport, index) => {
                    // Validate airport data
                    if (!airport.location || !airport.location.coordinates || 
                        airport.location.coordinates.length !== 2) {
                        console.warn(`Airport ${airport.iataCode} has invalid coordinates`);
                        invalidAirports++;
                        return;
                    }
                    
                    const [lng, lat] = airport.location.coordinates;
                    
                    // Validate latitude and longitude ranges
                    if (lat < -90 || lat > 90 || lng < -180 || lng > 180) {
                        console.warn(`Airport ${airport.iataCode} has invalid coordinates: [${lng}, ${lat}]`);
                        invalidAirports++;
                        return;
                    }
                    
                    // Create marker with smaller default size for better performance
                    const marker = L.circleMarker([lat, lng], {
                        radius: airportMarkerSize(airport),
                        fillColor: '#007bff',
                        color: '#fff',
                        weight: 1,
                        opacity: 1,
                        fillOpacity: 0.7,
                        className: 'airport-marker'
                    }).addTo(map);
                    
                    // Store reference to marker with airport data
                    marker.airportData = airport;
                    allAirportMarkers.push(marker);
                    validAirports++;
                    
                    // Enhanced popup with better styling
                    marker.bindPopup(`
                        <div style="text-align: center; min-width: 200px;">
                            <h6 style="margin: 0 0 8px 0; color: #007bff;">${airport.iataCode}</h6>
                            <div style="font-weight: bold; margin-bottom: 5px;">${airport.name}</div>
                            <div style="color: #666; margin-bottom: 8px;">${airport.city}, ${airport.country}</div>
                            <button onclick="selectAirport('${airport.iataCode}')" 
                                    style="padding: 6px 12px; background: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 0.9em;">
                                Select as Departure ✈️
                            </button>
                        </div>
                    `, {
                        maxWidth: 250,
                        className: 'custom-popup'
                    });
                    
                    // Click to set as departure
                    marker.on('click', function(e) {
                        selectAirport(airport.iataCode);
                        e.originalEvent.stopPropagation();
                    });
                    
                    // Show progress for large datasets
                    if (validAirports % 500 === 0) {
                        console.log(`Loaded ${validAirports} airports...`);
                    }
                });
                
                console.log(`Successfully loaded ${validAirports} airports on map`);
                if (invalidAirports > 0) {
                    console.warn(`Skipped ${invalidAirports} airports with invalid coordinates`);
                }
                
                // Update legend with actual count
                updateLegend(validAirports);
                
            } catch (error) {
                console.error('Failed to load airports:', error);
                alert(`Failed to load airports: ${error.message}\nPlease check your connection and try again.`);
            } finally {
                // Hide loading overlay
                document.getElementById('loading-overlay').style.display = 'none';
                isLoading = false;
            }
        }

        // Update legend with airport count
        function updateLegend(count) {
            const legend = document.querySelector('.map-legend h6');
            if (legend) {
                legend.textContent = `Airport Legend (${count} airports)`;
            }
        }

        // Function to select an airport (can be called from popup buttons)
        window.selectAirport = function(iataCode) {
            console.log(`Selected airport: ${iataCode}`);
            document.querySelector('input[name="departure"]').value = iataCode;
            showDestinations(iataCode);
        }

        // Show available destinations from selected departure
        async function showDestinations(departureCode) {
            try {
                console.log(`Loading destinations from ${departureCode}...`);
                const response = await fetch(`/api/destinations/${departureCode}`);
                const destinations = await response.json();
                
                console.log(`Found ${destinations.length} destinations from ${departureCode}`);
                
                // Reset all airport markers to default style
                allAirportMarkers.forEach(marker => {
                    const airport = marker.airportData;
                    if (airport.iataCode === departureCode) {
                        // Highlight departure airport in green
                        marker.setStyle({
                            radius: 8,
                            fillColor: '#28a745',
                            color: '#fff',
                            weight: 2,
                            opacity: 1,
                            fillOpacity: 1
                        });
                    } else {
                        // Check if this airport is a destination
                        const isDestination = destinations.some(dest => dest.iataCode === airport.iataCode);
                        
                        if (isDestination) {
                            // Highlight available destinations in orange
                            marker.setStyle({
                                radius: 6,
                                fillColor: '#fd7e14',
                                color: '#fff',
                                weight: 2,
                                opacity: 1,
                                fillOpacity: 0.9
                            });
                        } else {
                            // Dim other airports
                            marker.setStyle({
                                radius: 3,
                                fillColor: '#6c757d',
                                color: '#fff',
                                weight: 1,
                                opacity: 0.5,
                                fillOpacity: 0.3
                            });
                        }
                    }
                });
                
                // Update the form to show departure is selected
                const form = document.querySelector('form');
                const formStatus = document.getElementById('form-status') || createFormStatus();
                formStatus.innerHTML = `
                    <div style="background: #d4edda; padding: 10px; border-radius: 5px; margin: 10px 0;">
                        Departure: <strong>${departureCode}</strong> | 
                        ${destinations.length} destinations available | 
                        Click an orange marker to select destination
                    </div>
                `;
                
                console.log(`Updated map with ${destinations.length} highlighted destinations`);
                
            } catch (error) {
                console.error('Failed to load destinations:', error);
                alert(`Failed to load destinations from ${departureCode}`);
            }
        }

        // Create status element if it doesn't exist
        function createFormStatus() {
            const statusDiv = document.createElement('div');
            statusDiv.id = 'form-status';
            const navbar = document.querySelector('.navbar');
            navbar.parentNode.insertBefore(statusDiv, navbar.nextSibling);
            return statusDiv;
        }

        // Reset map markers to default state
        function resetMapMarkers() {
            allAirportMarkers.forEach(marker => {
                marker.setStyle({
                    radius: airportMarkerSize(marker.airportData),
                    fillColor: '#007bff',
                    color: '#fff',
                    weight: 1,
                    opacity: 1,
                    fillOpacity: 0.7
                });
            });
            
            const formStatus = document.getElementById('form-status');
            if (formStatus) {
                formStatus.innerHTML = '';
            }
        }

        function airportMarkerSize(airport) {
            // Determine marker size based on airport type or focus
            if (focusAirports.includes(airport.iataCode)) {
                return 10; // Larger for focus airports
            } else {
                return 4; // Default size for other airports
            }
        }

        // Load airports when page loads
        loadAirports();
    </script>
</body>
</html>